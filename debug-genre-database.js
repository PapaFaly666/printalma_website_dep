// Script de d√©bogage pour le probl√®me du genre dans la base de donn√©es
console.log('üîç D√©bogage du probl√®me genre = UNISEXE dans la base de donn√©es...');

// Test 1: V√©rifier l'interface utilisateur
console.log('\n1Ô∏è‚É£ Test de l\'interface utilisateur:');
console.log('Instructions:');
console.log('1. Aller sur /admin/add-product');
console.log('2. Remplir le formulaire');
console.log('3. Dans l\'√©tape "Informations", s√©lectionner "Homme" dans le dropdown genre');
console.log('4. V√©rifier que "Homme" est bien s√©lectionn√©');
console.log('5. Continuer vers les √©tapes suivantes');
console.log('6. Dans l\'√©tape "Validation", v√©rifier que le badge affiche "Homme"');
console.log('7. Cr√©er le produit');

// Test 2: V√©rifier les logs frontend
console.log('\n2Ô∏è‚É£ Logs frontend attendus:');
console.log('üîÑ updateFormData: genre = HOMME');
console.log('üîç Genre s√©lectionn√© par l\'utilisateur: HOMME');
console.log('üîç Genre qui sera envoy√©: HOMME');
console.log('üîç V√©rification - genre est-il d√©fini? true');
console.log('üîç V√©rification - genre est-il diff√©rent de UNISEXE? true');

// Test 3: V√©rifier les logs backend
console.log('\n3Ô∏è‚É£ Logs backend attendus:');
console.log('üîç [DEBUG] Donn√©es re√ßues: {');
console.log('  "name": "test produit",');
console.log('  "description": "description",');
console.log('  "price": 1000,');
console.log('  "stock": 0,');
console.log('  "status": "published",');
console.log('  "categories": ["V√™tements > T-shirts"],');
console.log('  "sizes": ["S", "M", "L"],');
console.log('  "genre": "HOMME", // ‚Üê CE CHAMP DOIT √äTRE PR√âSENT ET CORRECT');
console.log('  "colorVariations": [...]');
console.log('}');

// Test 4: Probl√®mes possibles
console.log('\n4Ô∏è‚É£ Probl√®mes possibles:');

console.log('\n‚ùå Probl√®me 1: Frontend n\'envoie pas le genre');
console.log('Sympt√¥me: Les logs frontend montrent genre: "UNISEXE"');
console.log('Cause: L\'utilisateur n\'a pas s√©lectionn√© de genre ou le dropdown ne fonctionne pas');
console.log('Solution: V√©rifier que le dropdown genre fonctionne correctement');

console.log('\n‚ùå Probl√®me 2: Backend ne re√ßoit pas le genre');
console.log('Sympt√¥me: Les logs backend ne montrent pas le champ "genre"');
console.log('Cause: Le champ genre n\'est pas inclus dans la requ√™te');
console.log('Solution: V√©rifier que le champ genre est bien dans productDataToSend');

console.log('\n‚ùå Probl√®me 3: Backend re√ßoit le genre mais l\'ignore');
console.log('Sympt√¥me: Les logs backend montrent genre: "HOMME" mais la DB a "UNISEXE"');
console.log('Cause: Le backend ne traite pas le champ genre ou a une logique par d√©faut');
console.log('Solution: V√©rifier la logique du backend pour le champ genre');

console.log('\n‚ùå Probl√®me 4: Base de donn√©es a une contrainte par d√©faut');
console.log('Sympt√¥me: Le backend traite correctement mais la DB force "UNISEXE"');
console.log('Cause: Contrainte DEFAULT dans la base de donn√©es');
console.log('Solution: V√©rifier le sch√©ma de la base de donn√©es');

// Test 5: Instructions de d√©bogage
console.log('\n5Ô∏è‚É£ Instructions de d√©bogage √©tape par √©tape:');

console.log('\n√âtape 1: V√©rifier le frontend');
console.log('1. Ouvrir la console du navigateur (F12)');
console.log('2. Aller sur /admin/add-product');
console.log('3. S√©lectionner "Homme" dans le dropdown genre');
console.log('4. V√©rifier les logs "üîÑ updateFormData: genre = HOMME"');
console.log('5. Si pas de logs, le probl√®me vient du dropdown');

console.log('\n√âtape 2: V√©rifier l\'envoi');
console.log('1. Cr√©er un produit avec genre "Homme"');
console.log('2. V√©rifier les logs "üîç Genre: HOMME"');
console.log('3. Si les logs montrent "UNISEXE", le probl√®me vient de l\'envoi');

console.log('\n√âtape 3: V√©rifier le backend');
console.log('1. V√©rifier les logs du backend');
console.log('2. Chercher "üîç [DEBUG] Donn√©es re√ßues"');
console.log('3. V√©rifier que "genre": "HOMME" est pr√©sent');
console.log('4. Si absent, le probl√®me vient de la transmission');

console.log('\n√âtape 4: V√©rifier la base de donn√©es');
console.log('1. V√©rifier le sch√©ma de la table products');
console.log('2. Chercher une contrainte DEFAULT sur le champ genre');
console.log('3. Si contrainte DEFAULT = "UNISEXE", c\'est le probl√®me');

// Test 6: Solutions
console.log('\n6Ô∏è‚É£ Solutions selon le probl√®me:');

console.log('\nSi Probl√®me 1 (Frontend):');
console.log('- V√©rifier que le composant ProductFormFields fonctionne');
console.log('- V√©rifier que onUpdate est bien appel√©');
console.log('- V√©rifier que formData.genre est mis √† jour');

console.log('\nSi Probl√®me 2 (Envoi):');
console.log('- V√©rifier que productDataToSend inclut le genre');
console.log('- V√©rifier que formData.genre a la bonne valeur');
console.log('- V√©rifier que le fallback || "UNISEXE" ne s\'active pas');

console.log('\nSi Probl√®me 3 (Backend):');
console.log('- V√©rifier que le backend traite le champ genre');
console.log('- V√©rifier qu\'il n\'y a pas de logique qui force "UNISEXE"');
console.log('- V√©rifier que le DTO inclut le champ genre');

console.log('\nSi Probl√®me 4 (Base de donn√©es):');
console.log('- V√©rifier le sch√©ma Prisma');
console.log('- Chercher @default("UNISEXE") sur le champ genre');
console.log('- Modifier le sch√©ma si n√©cessaire');

console.log('\nüîß Test rapide:');
console.log('1. Cr√©er un produit avec genre "Homme"');
console.log('2. V√©rifier les logs frontend et backend');
console.log('3. V√©rifier la base de donn√©es');
console.log('4. Identifier o√π le genre devient "UNISEXE"'); 