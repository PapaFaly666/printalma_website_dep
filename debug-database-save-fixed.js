// üîß Script de diagnostic corrig√© avec le bon format de donn√©es

const BACKEND_URL = 'https://printalma-back-dep.onrender.com';

console.log('üîç DIAGNOSTIC SAUVEGARDE EN BASE (VERSION CORRIG√âE)');
console.log('=================================================');

// Test de cr√©ation de produit avec le BON format (FormData + productData JSON)
async function testProductCreationCorrect() {
  console.log('\n2. üß™ TEST CR√âATION PRODUIT (FORMAT CORRIG√â):');
  
  const testProduct = {
    name: "TEST DEBUG CORRIG√â " + Date.now(),
    description: "Produit de test pour debug - format correct",
    price: 1000,
    suggestedPrice: 1000,
    stock: 1,
    status: "draft",
    categories: ["Test"],
    sizes: ["M"],
    genre: "UNISEXE",
    isReadyProduct: false,
    colorVariations: [{
      name: "Couleur Test",
      colorCode: "#FF0000",
      images: [{
        fileId: "test_image_001",
        view: "Front",
        delimitations: []
      }]
    }]
  };
  
  console.log('   üì§ Donn√©es de test (format ProductService):', JSON.stringify(testProduct, null, 2));
  
  try {
    // ‚úÖ SOLUTION: Utiliser FormData comme ProductService
    const formData = new FormData();
    
    // CRITICAL: Le backend attend "productData" comme champ JSON
    formData.append('productData', JSON.stringify(testProduct));
    
    // Cr√©er un faux fichier pour le test
    const testFile = new Blob(['test image data'], { type: 'image/jpeg' });
    const fakeFile = new File([testFile], 'test-image.jpg', { type: 'image/jpeg' });
    formData.append('file_test_image_001', fakeFile);
    
    console.log('   üìã FormData cr√©√© avec:');
    console.log('     - productData: JSON string');
    console.log('     - file_test_image_001: File blob');
    
    const response = await fetch(`${BACKEND_URL}/products`, {
      method: 'POST',
      credentials: 'include',
      body: formData // ‚úÖ Pas de Content-Type: multipart/form-data automatique
    });
    
    console.log(`   üì• Response status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log('   ‚úÖ R√©ponse positive du backend (FORMAT CORRIG√â)');
      console.log('   üìã Produit retourn√©:', {
        id: result.id || result.data?.id,
        name: result.name || result.data?.name,
        suggestedPrice: result.suggestedPrice || result.data?.suggestedPrice,
        status: result.status || result.data?.status
      });
      
      const productId = result.id || result.data?.id;
      
      if (productId) {
        console.log(`\\n   üîç V√âRIFICATION IMM√âDIATE EN BASE (ID: ${productId}):`);
        const verifyResponse = await fetch(`${BACKEND_URL}/products/${productId}`, {
          credentials: 'include'
        });
        
        if (verifyResponse.ok) {
          const savedProduct = await verifyResponse.json();
          const product = savedProduct.data || savedProduct;
          console.log('   ‚úÖ Produit trouv√© en base avec ID:', product.id);
          console.log('   üìä suggestedPrice en base:', product.suggestedPrice);
          console.log('   üìä Status en base:', product.status);
          console.log('   üìä Sizes en base:', product.sizes);
          console.log('   üìä Genre en base:', product.genre);
          
          return { created: true, id: productId, found: true, data: product };
        } else {
          console.log('   ‚ùå Produit NON trouv√© en base apr√®s cr√©ation !');
          return { created: true, id: productId, found: false };
        }
      }
      
      return { created: true, id: null, found: false };
    } else {
      const errorText = await response.text();
      console.log('   ‚ùå Erreur backend:', errorText);
      return { created: false, error: errorText };
    }
  } catch (error) {
    console.log('   üí• Erreur cr√©ation:', error.message);
    return { created: false, error: error.message };
  }
}

// Test de connexion backend
async function testBackendConnection() {
  console.log('\\n1. üß™ TEST CONNEXION BACKEND:');
  
  try {
    const response = await fetch(`${BACKEND_URL}/products`, {
      credentials: 'include'
    });
    console.log(`   Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      const products = data.data || data;
      console.log(`   ‚úÖ Backend accessible`);
      console.log(`   üìä Nombre de produits retourn√©s: ${Array.isArray(products) ? products.length : 'N/A'}`);
      return true;
    } else {
      console.log(`   ‚ùå Backend non accessible`);
      return false;
    }
  } catch (error) {
    console.log(`   üí• Erreur connexion: ${error.message}`);
    return false;
  }
}

// Test de liste des produits
async function testProductList(createdId) {
  console.log('\\n3. üß™ TEST LISTE PRODUITS APR√àS CR√âATION:');
  
  try {
    const response = await fetch(`${BACKEND_URL}/products`, {
      credentials: 'include'
    });
    
    if (response.ok) {
      const responseData = await response.json();
      const products = responseData.data || responseData;
      
      if (Array.isArray(products)) {
        console.log(`   üìä Total produits en base: ${products.length}`);
        
        if (createdId) {
          const found = products.find(p => p.id == createdId);
          if (found) {
            console.log(`   ‚úÖ Produit ID ${createdId} trouv√© dans la liste`);
            console.log('   üìã Donn√©es du produit trouv√©:', {
              name: found.name,
              suggestedPrice: found.suggestedPrice,
              status: found.status,
              genre: found.genre,
              createdAt: found.createdAt
            });
          } else {
            console.log(`   ‚ùå Produit ID ${createdId} NON trouv√© dans la liste`);
          }
        }
        
        // Afficher les 3 derniers produits
        const lastProducts = products.slice(-3);
        console.log('   üìã 3 derniers produits:');
        lastProducts.forEach(p => {
          console.log(`     - ID ${p.id}: "${p.name}" (suggestedPrice: ${p.suggestedPrice || 'null'}, genre: ${p.genre || 'null'})`);
        });
      } else {
        console.log('   ‚ùå Format de r√©ponse inattendu:', typeof responseData);
      }
      
    } else {
      console.log('   ‚ùå Erreur r√©cup√©ration liste:', response.status);
    }
  } catch (error) {
    console.log('   üí• Erreur liste:', error.message);
  }
}

// Ex√©cution du diagnostic corrig√©
async function runDiagnosisFixed() {
  console.log(`üåê Backend URL: ${BACKEND_URL}`);
  
  // Test 1: Connexion
  const connected = await testBackendConnection();
  if (!connected) {
    console.log('\\n‚ùå DIAGNOSTIC ARR√äT√â: Backend non accessible');
    return;
  }
  
  // Test 2: Cr√©ation avec format corrig√©
  const createResult = await testProductCreationCorrect();
  
  // Test 3: Liste apr√®s cr√©ation
  await testProductList(createResult.id);
  
  // Conclusion
  console.log('\\nüéØ CONCLUSION DIAGNOSTIC CORRIG√â:');
  console.log('====================================');
  
  if (createResult.created && createResult.found) {
    console.log('   ‚úÖ Le backend fonctionne PARFAITEMENT !');
    console.log('   ‚úÖ Les donn√©es se sauvegardent en base avec le bon format');
    console.log('   ‚úÖ suggestedPrice est bien persist√©');
    console.log('   ');
    console.log('   üìã DONN√âES SAUVEGARD√âES:');
    if (createResult.data) {
      console.log(`     - Nom: ${createResult.data.name}`);
      console.log(`     - SuggestedPrice: ${createResult.data.suggestedPrice}`);
      console.log(`     - Genre: ${createResult.data.genre}`);
      console.log(`     - Status: ${createResult.data.status}`);
    }
    console.log('   ');
    console.log('   ‚û°Ô∏è  PROBL√àME R√âSOLU: Le format FormData + productData JSON fonctionne !');
  } else if (createResult.created && !createResult.found) {
    console.log('   ‚ö†Ô∏è  Le backend cr√©e mais les donn√©es disparaissent apr√®s');
    console.log('   ‚û°Ô∏è  Probl√®me probable: transaction rollback ou DB corruption');
  } else {
    console.log('   ‚ùå Le backend refuse toujours les requ√™tes');
    console.log('   ‚û°Ô∏è  Probl√®me: Format encore incorrect ou erreur serveur');
    console.log('   üí° Erreur:', createResult.error);
  }
  
  console.log('\\nüîß IMPLICATIONS POUR LE FRONTEND:');
  console.log('==================================');
  console.log('   ‚úÖ ProductService.createProduct() utilise le bon format');
  console.log('   ‚úÖ FormData + productData JSON string');
  console.log('   ‚úÖ Les corrections dans ProductFormMain.tsx devraient fonctionner');
  console.log('   ');
  console.log('   üìù SI LE PROBL√àME PERSISTE C√îT√â FRONTEND:');
  console.log('     - V√©rifier que ProductFormMain utilise ProductService.createProduct()');
  console.log('     - V√©rifier que les images sont bien pass√©es dans imageFiles');
  console.log('     - V√©rifier les logs de debug dans la console frontend');
}

// Lancer le diagnostic corrig√©
runDiagnosisFixed().catch(console.error);