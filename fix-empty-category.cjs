// Script pour corriger la cat√©gorie avec nom vide
const axios = require('axios');

const fixEmptyCategory = async () => {
    console.log('üîß CORRECTION - Cat√©gorie avec nom vide\n');
    
    const API_URL = 'http://localhost:3004';
    
    try {
        // 1. R√©cup√©rer les cat√©gories actuelles
        console.log('üì° R√©cup√©ration des cat√©gories actuelles...');
        const response = await axios.get(`${API_URL}/categories`);
        const categories = response.data;
        
        console.log(`üìã ${categories.length} cat√©gories trouv√©es`);
        
        // 2. Identifier les cat√©gories avec nom vide
        const emptyCategories = categories.filter(cat => !cat.name || cat.name.trim() === '');
        
        if (emptyCategories.length === 0) {
            console.log('‚úÖ Aucune cat√©gorie avec nom vide trouv√©e !');
            return;
        }
        
        console.log(`‚ö†Ô∏è ${emptyCategories.length} cat√©gorie(s) avec nom vide trouv√©e(s):`);
        emptyCategories.forEach(cat => {
            console.log(`  - ID: ${cat.id}, Nom: "${cat.name}"`);
        });
        
        // 3. Proposer deux options
        console.log('\nüéØ OPTIONS DE CORRECTION:');
        console.log('1. Supprimer les cat√©gories avec nom vide');
        console.log('2. Corriger avec un nom par d√©faut');
        
        // Option 1: Supprimer
        console.log('\nüóëÔ∏è OPTION 1 - Suppression:');
        for (const cat of emptyCategories) {
            try {
                console.log(`  üîÑ Suppression de la cat√©gorie ID ${cat.id}...`);
                await axios.delete(`${API_URL}/categories/${cat.id}`);
                console.log(`  ‚úÖ Cat√©gorie ID ${cat.id} supprim√©e avec succ√®s`);
            } catch (error) {
                console.log(`  ‚ùå Erreur lors de la suppression de ID ${cat.id}:`, error.response?.data || error.message);
            }
        }
        
        // 4. V√©rification finale
        console.log('\nüîç V√âRIFICATION FINALE...');
        const finalResponse = await axios.get(`${API_URL}/categories`);
        const finalCategories = finalResponse.data;
        
        console.log(`üìã ${finalCategories.length} cat√©gories apr√®s correction:`);
        finalCategories.forEach(cat => {
            console.log(`  - ID: ${cat.id}, Nom: "${cat.name}"`);
        });
        
        // V√©rifier qu'il n'y a plus de cat√©gories vides
        const stillEmpty = finalCategories.filter(cat => !cat.name || cat.name.trim() === '');
        
        if (stillEmpty.length === 0) {
            console.log('\n‚úÖ SUCC√àS: Toutes les cat√©gories ont maintenant des noms valides !');
        } else {
            console.log('\n‚ö†Ô∏è ATTENTION: Il reste des cat√©gories avec nom vide');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.response?.data || error.message);
    }
};

// Si vous voulez ex√©cuter une correction alternative (renommer au lieu de supprimer)
const fixEmptyCategoryWithRename = async () => {
    console.log('üîß CORRECTION ALTERNATIVE - Renommer les cat√©gories vides\n');
    
    const API_URL = 'http://localhost:3004';
    
    try {
        const response = await axios.get(`${API_URL}/categories`);
        const categories = response.data;
        
        const emptyCategories = categories.filter(cat => !cat.name || cat.name.trim() === '');
        
        if (emptyCategories.length === 0) {
            console.log('‚úÖ Aucune cat√©gorie avec nom vide trouv√©e !');
            return;
        }
        
        console.log('\n‚úèÔ∏è RENOMMAGE DES CAT√âGORIES VIDES:');
        for (const cat of emptyCategories) {
            try {
                const newName = `Cat√©gorie ${cat.id}`;
                console.log(`  üîÑ Renommage de la cat√©gorie ID ${cat.id} vers "${newName}"...`);
                
                await axios.put(`${API_URL}/categories/${cat.id}`, {
                    name: newName,
                    description: 'Cat√©gorie corrig√©e automatiquement'
                });
                
                console.log(`  ‚úÖ Cat√©gorie ID ${cat.id} renomm√©e avec succ√®s`);
            } catch (error) {
                console.log(`  ‚ùå Erreur lors du renommage de ID ${cat.id}:`, error.response?.data || error.message);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction:', error.response?.data || error.message);
    }
};

// Ex√©cution par d√©faut: suppression
console.log('üöÄ D√©marrage de la correction (suppression)...');
fixEmptyCategory().catch(console.error);

// D√©commentez la ligne suivante pour utiliser le renommage √† la place:
// fixEmptyCategoryWithRename().catch(console.error); 