import { apiClient } from '@/lib/apiClient';

/**
 * Retourne le **vendorProductId** associ√© au `baseProductId` + `designId`.
 * 1Ô∏è‚É£ Cherche dans la liste `/vendor/products`.
 * 2Ô∏è‚É£ Si absent ‚ûú cr√©e le produit via `POST /vendor/products` (backend V2).
 * La fonction renvoie toujours un ID **‚â• 60** (les IDs < 60 sont r√©serv√©s aux produits admin).
 */
// Cache interne pour √©viter les cr√©ations multiples concurrentes
const creationCache = new Map<string, Promise<number>>();

export async function getOrCreateVendorProduct(baseProductId: number, designId: number): Promise<number> {
  const cacheKey = `${baseProductId}-${designId}`;
  if (creationCache.has(cacheKey)) {
    return creationCache.get(cacheKey)!;
  }

  const promise = (async () => {
  // 1. Chercher c√¥t√© backend s'il existe d√©j√†
  try {
    const { data } = await apiClient.get('/vendor/products', {
      params: { limit: 1000 }, // r√©cup√®re tous les produits du vendeur
      withCredentials: true
    });

    const list = data?.data?.products || data?.products || data?.data || [];
    const existing = list.find((p: any) =>
      p?.adminProduct?.id === baseProductId &&
      p?.designApplication?.designId === designId
    );

    if (existing) {
      console.log('üîç VendorProduct d√©j√† existant ‚ûú', existing.id);
      return existing.id;
    }
  } catch (err) {
    console.warn('‚ÑπÔ∏è Impossible de r√©cup√©rer /vendor/products ‚Äì tentative de cr√©ation directe');
  }

  // 2. Cr√©ation du produit vendeur
  console.log('üì¶ Cr√©ation vendorProduct (V2) pour baseProductId', baseProductId);

  // Construire la structure admin compl√®te (obligatoire)
  const productStructure = await (await import('./buildProductStructure')).buildProductStructure(baseProductId);

  // D√©duire selectedColors / selectedSizes √† partir du produit admin
  const derivedColors = (productStructure.adminProduct.images.colorVariations || []).map((cv: any) => ({
    id: cv.id,
    name: cv.name,
    colorCode: cv.colorCode
  }));

  const derivedSizes = (productStructure.adminProduct.sizes || []).map((sz: any) => ({
    id: sz.id,
    sizeName: sz.sizeName
  }));

  const payload: Record<string, any> = {
    baseProductId,
    designId,
    productStructure,

    // Champs vendeur requis
    vendorName: `Produit personnalis√© #${baseProductId}`,
    vendorDescription: '', // ‚¨ÖÔ∏è DESCRIPTION VIDE pour √©viter l'erreur auto-g√©n√©r√©e
    vendorPrice: 19900,
    vendorStock: 0,

    // S√©lections d√©riv√©es (fallback sur placeholders si vides)
    selectedColors: derivedColors.length ? derivedColors : [{ id: 0, name: 'Par d√©faut', colorCode: '#FFFFFF' }],
    selectedSizes: derivedSizes.length ? derivedSizes : [{ id: 0, sizeName: 'TU' }]
  };

  const pubRes = await apiClient.post('/vendor/products', payload, { withCredentials: true });

  const newVpId = pubRes.data?.productId || pubRes.data?.data?.productId || pubRes.data?.id;
  if (!newVpId) {
    console.error('‚ùå /vendor/products n ºa pas retourn√© productId', pubRes.data);
    throw new Error('productId manquant dans la r√©ponse de /vendor/products');
  }

  console.log('‚úÖ VendorProduct cr√©√© ‚ûú', newVpId);
  return newVpId;
  })();

  // Stocker la promesse pour d√©dupliquer
  creationCache.set(cacheKey, promise);

  try {
    const result = await promise;
    return result;
  } finally {
    // Nettoyage pour √©viter m√©moire infinie
    creationCache.delete(cacheKey);
  }
} 